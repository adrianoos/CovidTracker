{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Chart/Chart.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterButton","variant","start","end","value","duration","separator","Date","toDateString","gutterBotton","url","fetchData","country","a","changeUrl","axios","get","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","console","log","fetchCountries","response","modifiedResponse","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","SetFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","setData","setCountry","fetchedData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8EACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,iOC+DpJC,EA1DD,SAAC,GAA0D,IAAD,IAAvDC,KAAQC,EAA+C,EAA/CA,UAAWC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,WACrD,OAAKH,EAKC,qBAAKI,UAAWC,IAAOC,UAAvB,SACA,eAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,EAAGC,QAAQ,SAApC,UACI,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOY,UAA7E,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,sBACA,cAACF,EAAA,EAAD,CAAYG,QAAQ,KAApB,SACI,cAAC,IAAD,CACAC,MAAO,EACPC,IAAKxB,EAAUyB,MACfC,SAAU,IACVC,UAAU,QAGd,cAACR,EAAA,EAAD,CAAYC,MAAM,gBAAlB,SAAmC,IAAIQ,KAAKzB,GAAY0B,iBACxD,cAACV,EAAA,EAAD,CAAYG,QAAQ,QAApB,yCAGR,cAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOJ,WAA7E,SACI,eAACiB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBU,cAAY,EAA9C,uBACA,cAACX,EAAA,EAAD,CAAYG,QAAQ,KAApB,SACI,cAAC,IAAD,CACAC,MAAO,EACPC,IAAKvB,EAAUwB,MACfC,SAAU,IACVC,UAAU,QAGd,cAACR,EAAA,EAAD,CAAYC,MAAM,gBAAlB,SAAmC,IAAIQ,KAAKzB,GAAY0B,iBACxD,cAACV,EAAA,EAAD,CAAYG,QAAQ,QAApB,uCAGR,cAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOH,QAA7E,SACI,eAACgB,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBU,cAAY,EAA9C,oBACA,cAACX,EAAA,EAAD,CAAYG,QAAQ,KAApB,SACI,cAAC,IAAD,CACAC,MAAO,EACPC,IAAKtB,EAAOuB,MACZC,SAAU,IACVC,UAAU,QAGd,cAACR,EAAA,EAAD,CAAYC,MAAM,gBAAlB,SAAmC,IAAIQ,KAAKzB,GAAY0B,iBACxD,cAACV,EAAA,EAAD,CAAYG,QAAQ,QAApB,qCAhDR,c,iBCNNS,EAAM,iCAECC,EAAS,uCAAG,WAAOC,GAAP,6BAAAC,EAAA,6DACjBC,EAAYJ,EAEdE,IACFE,EAAU,GAAD,OAAIJ,EAAJ,sBAAqBE,IAJT,kBAOoDG,IAAMC,IAAIF,GAP9D,2BAOTpC,KAAQC,EAPC,EAODA,UAAWC,EAPV,EAOUA,UAAWC,EAPrB,EAOqBA,OAAQC,EAP7B,EAO6BA,WAExCmC,EAAe,CACjBtC,YACAC,YACAC,SACAC,cAba,kBAgBVmC,GAhBU,4FAAH,sDAsBTC,EAAc,uCAAG,gCAAAL,EAAA,+EAEDE,IAAMC,IAAN,UAAaN,EAAb,WAFC,uBAEfhC,EAFe,EAEfA,KACDuC,EAAevC,EAAKyC,KAAI,SAACC,GAAD,MAAgB,CAC1CzC,UAAWyC,EAAUzC,UAAU0C,MAC/BxC,OAAQuC,EAAUvC,OAAOwC,MACzBC,KAAMF,EAAUG,eANE,kBASfN,GATe,gCAWtBO,QAAQC,IAAR,MAXsB,yDAAH,qDAedC,EAAc,uCAAG,8BAAAb,EAAA,+EAECE,IAAMC,IAAN,UAAaN,EAAb,eAFD,cAEhBiB,EAFgB,OAGhBC,EAAmB,CACrBD,SAAUA,EAASjD,KAAKmD,UAAUV,KAAI,SAAAP,GAAO,OAAIA,EAAQkB,SAJvC,kBAOfF,GAPe,gCAYtBJ,QAAQC,IAAR,MAZsB,yDAAH,qD,yBCqBZM,EAxDD,SAAC,GAAqB,IAAnBrD,EAAkB,EAAlBA,KAAMkC,EAAY,EAAZA,QAAY,EACGoB,mBAAS,IADZ,mBACxBZ,EADwB,KACba,EADa,KAE/BT,QAAQC,IAAI/C,GAEZwD,qBAAU,YACQ,uCAAG,sBAAArB,EAAA,kEACboB,EADa,SACMf,IADN,6EAAH,qDAGdiB,KACD,IAEH,IAAMC,EACFhB,EAAUiB,OACT,cAAC,OAAD,CAAM3D,KAAM,CACT4D,OAAQlB,EAAUD,KAAI,qBAAGG,QACzBiB,SAAU,CAAC,CACP7D,KAAM0C,EAAUD,KAAI,qBAAGxC,aACvB6D,MAAO,WACPC,YAAa,UACbC,MAAM,GACR,CACEhE,KAAM0C,EAAUD,KAAI,qBAAGtC,UACvB2D,MAAO,SACPC,YAAa,mBACbE,gBAAiB,OACjBD,MAAM,OAEN,KAGNE,EACFlE,EAAKC,UACJ,cAAC,MAAD,CACTD,KAAM,CACF4D,OAAQ,CAAC,WAAY,YAAc,UACnCC,SAAU,CAAC,CACPC,MAAO,SACPG,gBAAiB,CAAC,mBAAoB,mBAAoB,oBAC1DjE,KAAK,CAACA,EAAKC,UAAUyB,MAAO1B,EAAKE,UAAUwB,MAAO1B,EAAKG,OAAOuB,UAGtEyC,QAAS,CACLC,OAAQ,CAAEC,SAAS,GACnBC,MAAO,CAAED,SAAS,EAAME,KAAK,oBAAD,OAAsBrC,OAG9C,KAGJ,OACI,qBAAK7B,UAAWC,IAAOC,UAAvB,SACM2B,EAAUgC,EAAWR,K,mCCzBpBc,EAxBO,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,oBAAwB,EACInB,mBAAS,IADb,mBACrCoB,EADqC,KACnBC,EADmB,KAY5C,OAVAnB,qBAAU,YACQ,uCAAG,8BAAArB,EAAA,6DACPc,EAAWD,IADJ,SAEMC,EAFN,OAEPjD,EAFO,OAGb2E,EAAoB3E,EAAKiD,UAHZ,2CAAH,qDAMdQ,KACD,CAACiB,IAGF,cAACE,EAAA,EAAD,CAAavE,UAAWC,IAAOuE,YAA/B,SACI,eAACC,EAAA,EAAD,CAAcC,aAAa,GAAGC,SAAU,SAACC,GAAD,OAAKR,EAAoBQ,EAAEC,OAAOxD,QAA1E,UACI,wBAAQA,MAAM,SAAd,oBACEgD,EAAiBjC,KAAI,SAACP,EAASiD,GAAV,OACnB,wBAAgBzD,MAAOQ,EAAvB,SAAiCA,GAApBiD,YCMhBC,G,OA1BH,WAAO,IAAD,EACU9B,mBAAS,IADnB,mBACRtD,EADQ,KACFqF,EADE,OAEgB/B,mBAAS,IAFzB,mBAERpB,EAFQ,KAECoD,EAFD,KAKVb,EAAmB,uCAAG,WAAOvC,GAAP,eAAAC,EAAA,sEACAF,EAAUC,GADV,OACpBqD,EADoB,OAE1BF,EAAQE,GACRD,EAAWpD,GAHe,2CAAH,sDAWzB,OALFsB,qBAAU,WACR,IAAM+B,EAActD,IAClBoD,EAAQE,KACT,IAGD,sBAAKlF,UAAU,YAAf,UACE,cAAC,EAAD,CAAOL,KAAMA,IACb,cAAC,EAAD,CAAeyE,oBAAqBA,IACpC,cAAC,EAAD,CAAOzE,KAAMA,EAAMkC,QAASA,SCrBhCsD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,mBCP1B/F,EAAOC,QAAU,CAAC,UAAY,2B","file":"static/js/main.ca77d7f4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__13bO7\",\"card\":\"Cards_card__rYJN3\",\"infected\":\"Cards_infected__3X7Wx\",\"recovered\":\"Cards_recovered__2gTz3\",\"deaths\":\"Cards_deaths__1ViVy\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate }}) =>{\r\n  if (!confirmed) {\r\n     return 'Loading...'\r\n  }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n        <Grid container spacing={3} justify='center'>\r\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterButton>Infected</Typography>\r\n                    <Typography variant='h5'>\r\n                        <CountUp \r\n                        start={0}\r\n                        end={confirmed.value}\r\n                        duration={2.5}\r\n                        separator=','\r\n                        />\r\n                    </Typography>\r\n                    <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant='body2' >Number of active cases</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBotton>Recovered</Typography>\r\n                    <Typography variant='h5'>\r\n                        <CountUp \r\n                        start={0}\r\n                        end={recovered.value}\r\n                        duration={2.5}\r\n                        separator=','\r\n                        />\r\n                    </Typography>\r\n                    <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant='body2' >Number of recoveries</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBotton>Deaths</Typography>\r\n                    <Typography variant='h5'>\r\n                        <CountUp \r\n                        start={0}\r\n                        end={deaths.value}\r\n                        duration={2.5}\r\n                        separator=','\r\n                        />\r\n                    </Typography>\r\n                    <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant='body2' >Number deaths</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n        </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) =>{\r\n    let changeUrl = url\r\n\r\n   if(country) {\r\n    changeUrl=`${url}/countries/${country}`\r\n   }\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeUrl) \r\n\r\n        const modifiedData = {\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate,\r\n        }\r\n\r\n        return modifiedData\r\n    } catch (error) {\r\n        \r\n    }\r\n};\r\n\r\nexport const fetchDailyData = async () =>{\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`)\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () =>{\r\n    try {\r\n        const response = await axios.get(`${url}/countries`)\r\n        const modifiedResponse = {\r\n            response: response.data.countries.map(country => country.name)\r\n        }\r\n\r\n        return modifiedResponse\r\n\r\n       \r\n\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\n\r\nconst Chart = ({ data, country}) =>{\r\n    const [dailyData, setDailyData] = useState([])\r\n    console.log(data)\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () =>{\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData.length ? \r\n        (<Line data={{\r\n            labels: dailyData.map(({ date }) => date),\r\n            datasets: [{\r\n                data: dailyData.map(({ confirmed }) => confirmed),\r\n                label: 'Infected',\r\n                borderColor: '#3333ff',\r\n                fill: true\r\n            },{\r\n                data: dailyData.map(({ deaths }) => deaths),\r\n                label: 'Deaths',\r\n                borderColor: 'rgb(187, 69, 69)',\r\n                backgroundColor: 'grey',\r\n                fill: true\r\n            }]\r\n        }}/>) : null\r\n    ); \r\n\r\n    const barChart = (\r\n        data.confirmed ?\r\n        (<Bar\r\ndata={{\r\n    labels: ['Infected', 'Recovered' , 'Deaths'],\r\n    datasets: [{\r\n        label: 'People',\r\n        backgroundColor: ['rgb(187, 69, 69)', 'rgb(187, 69, 69)', 'rgb(187, 69, 69)'],\r\n        data:[data.confirmed.value, data.recovered.value, data.deaths.value]\r\n    }]\r\n}}\r\noptions={{\r\n    legend: { display: false },\r\n    title: { display: true, text: `Current state in ${country}` },\r\n}}\r\n       /> ):\r\n        null\r\n    )\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            { country ? barChart : lineChart }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { fetchCountries } from '../../api'\r\n\r\n\r\n\r\nconst CountryPicker = ({handleCountryChange}) =>{\r\n    const [fetchedCountries, SetFetchedCountries] = useState([]);\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            const response = fetchCountries()\r\n            const data = await response\r\n            SetFetchedCountries(data.response)\r\n        }\r\n\r\n        fetchAPI()\r\n    }, [fetchedCountries])\r\n\r\n    return (\r\n      <FormControl className={styles.formControl}>\r\n          <NativeSelect defaultValue='' onChange={(e)=>handleCountryChange(e.target.value)}>\r\n              <option value='global'>Global</option>\r\n              { fetchedCountries.map((country, i) => \r\n                  <option key={i} value={country}>{country}</option>\r\n                  )}\r\n          </NativeSelect>\r\n      </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React, { useState, useEffect } from 'react';\nimport { Cards, Chart, CountryPicker } from './components';\nimport { fetchData } from './api/index';\nimport './App.css';\n\nconst App = () => {\n  const [ data, setData ] = useState([])\n  const [ country, setCountry ] = useState('')\n \n  \n const  handleCountryChange = async (country) =>{\n    const fetchedData = await fetchData(country)\n    setData(fetchedData)\n    setCountry(country)\n  };\n\nuseEffect(() => {\n  const fetchedData = fetchData()\n    setData(fetchedData)\n}, [])\n\n  return (\n  <div className='container'>\n    <Cards data={data}/>\n    <CountryPicker handleCountryChange={handleCountryChange}/>\n    <Chart data={data} country={country}/>\n  </div>\n  );\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__Es--E\"};"],"sourceRoot":""}